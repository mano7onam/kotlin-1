/*
 * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.formatter;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class TypingIndentationTestBaseGenerated extends AbstractTypingIndentationTestBase {
    @TestMetadata("idea/testData/indentationOnNewline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DirectSettings extends AbstractTypingIndentationTestBase {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
        }

        @TestMetadata("AfterCatch.after.kt")
        public void testAfterCatch() throws Exception {
            runTest("idea/testData/indentationOnNewline/AfterCatch.after.kt");
        }

        @TestMetadata("AfterClassNameBeforeFun.after.kt")
        public void testAfterClassNameBeforeFun() throws Exception {
            runTest("idea/testData/indentationOnNewline/AfterClassNameBeforeFun.after.kt");
        }

        @TestMetadata("AfterFinally.after.kt")
        public void testAfterFinally() throws Exception {
            runTest("idea/testData/indentationOnNewline/AfterFinally.after.kt");
        }

        @TestMetadata("AfterImport.after.kt")
        public void testAfterImport() throws Exception {
            runTest("idea/testData/indentationOnNewline/AfterImport.after.kt");
        }

        @TestMetadata("AfterTry.after.kt")
        public void testAfterTry() throws Exception {
            runTest("idea/testData/indentationOnNewline/AfterTry.after.kt");
        }

        public void testAllFilesPresentInDirectSettings() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/testData/indentationOnNewline"), Pattern.compile("^([^\\.]+)\\.after\\.kt.*$"), null, true);
        }

        @TestMetadata("Annotation.after.kt")
        public void testAnnotation() throws Exception {
            runTest("idea/testData/indentationOnNewline/Annotation.after.kt");
        }

        @TestMetadata("AnnotationInDeclaration.after.kt")
        public void testAnnotationInDeclaration() throws Exception {
            runTest("idea/testData/indentationOnNewline/AnnotationInDeclaration.after.kt");
        }

        @TestMetadata("ArgumentListNormalIndent.after.kt")
        public void testArgumentListNormalIndent() throws Exception {
            runTest("idea/testData/indentationOnNewline/ArgumentListNormalIndent.after.kt");
        }

        @TestMetadata("AssignmentAfterEq.after.kt")
        public void testAssignmentAfterEq() throws Exception {
            runTest("idea/testData/indentationOnNewline/AssignmentAfterEq.after.kt");
        }

        @TestMetadata("BinaryWithTypeExpressions.after.kt")
        public void testBinaryWithTypeExpressions() throws Exception {
            runTest("idea/testData/indentationOnNewline/BinaryWithTypeExpressions.after.kt");
        }

        @TestMetadata("Catch.after.kt")
        public void testCatch() throws Exception {
            runTest("idea/testData/indentationOnNewline/Catch.after.kt");
        }

        @TestMetadata("Catch2.after.kt")
        public void testCatch2() throws Exception {
            runTest("idea/testData/indentationOnNewline/Catch2.after.kt");
        }

        @TestMetadata("Catch3.after.kt")
        public void testCatch3() throws Exception {
            runTest("idea/testData/indentationOnNewline/Catch3.after.kt");
        }

        @TestMetadata("Catch4.after.kt")
        public void testCatch4() throws Exception {
            runTest("idea/testData/indentationOnNewline/Catch4.after.kt");
        }

        @TestMetadata("ConsecutiveCallsAfterDot.after.kt")
        public void testConsecutiveCallsAfterDot() throws Exception {
            runTest("idea/testData/indentationOnNewline/ConsecutiveCallsAfterDot.after.kt");
        }

        @TestMetadata("ConsecutiveCallsInSaeCallsMiddle.after.kt")
        public void testConsecutiveCallsInSaeCallsMiddle() throws Exception {
            runTest("idea/testData/indentationOnNewline/ConsecutiveCallsInSaeCallsMiddle.after.kt");
        }

        @TestMetadata("ConsecutiveCallsInSafeCallsEnd.after.kt")
        public void testConsecutiveCallsInSafeCallsEnd() throws Exception {
            runTest("idea/testData/indentationOnNewline/ConsecutiveCallsInSafeCallsEnd.after.kt");
        }

        @TestMetadata("Do2.after.kt")
        public void testDo2() throws Exception {
            runTest("idea/testData/indentationOnNewline/Do2.after.kt");
        }

        @TestMetadata("DoInFun.after.kt")
        public void testDoInFun() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoInFun.after.kt");
        }

        @TestMetadata("DoWhile.after.kt")
        public void testDoWhile() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile.after.kt");
        }

        @TestMetadata("DoWhile2.after.kt")
        public void testDoWhile2() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile2.after.kt");
        }

        @TestMetadata("DoWhile3.after.kt")
        public void testDoWhile3() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile3.after.kt");
        }

        @TestMetadata("DoWhile4.after.kt")
        public void testDoWhile4() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile4.after.kt");
        }

        @TestMetadata("DoWhile5.after.kt")
        public void testDoWhile5() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile5.after.kt");
        }

        @TestMetadata("DoWhile6.after.kt")
        public void testDoWhile6() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile6.after.kt");
        }

        @TestMetadata("DoWhile7.after.kt")
        public void testDoWhile7() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWhile7.after.kt");
        }

        @TestMetadata("DoWithBraces.after.kt")
        public void testDoWithBraces() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWithBraces.after.kt");
        }

        @TestMetadata("DoWithBraces2.after.kt")
        public void testDoWithBraces2() throws Exception {
            runTest("idea/testData/indentationOnNewline/DoWithBraces2.after.kt");
        }

        @TestMetadata("ElseIf.after.kt")
        public void testElseIf() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseIf.after.kt");
        }

        @TestMetadata("ElseInWhenWithOption.after.kt")
        public void testElseInWhenWithOption() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseInWhenWithOption.after.kt");
        }

        @TestMetadata("ElseInWhenWithoutOption.after.kt")
        public void testElseInWhenWithoutOption() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseInWhenWithoutOption.after.kt");
        }

        @TestMetadata("ElseWithBrace.after.kt")
        public void testElseWithBrace() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseWithBrace.after.kt");
        }

        @TestMetadata("ElseWithBraceAndComment.after.kt")
        public void testElseWithBraceAndComment() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseWithBraceAndComment.after.kt");
        }

        @TestMetadata("ElseWithBraceAndComment2.after.kt")
        public void testElseWithBraceAndComment2() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseWithBraceAndComment2.after.kt");
        }

        @TestMetadata("ElseWithoutBrace.after.kt")
        public void testElseWithoutBrace() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseWithoutBrace.after.kt");
        }

        @TestMetadata("ElseWithoutBrace2.after.kt")
        public void testElseWithoutBrace2() throws Exception {
            runTest("idea/testData/indentationOnNewline/ElseWithoutBrace2.after.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReference.after.kt")
        public void testEmptyArgumentInCallByReference() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReference.after.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReferenceInSuperType.after.kt")
        public void testEmptyArgumentInCallByReferenceInSuperType() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReferenceInSuperType.after.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments.after.kt")
        public void testEmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments.after.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReferenceWithTypeArguments.after.kt")
        public void testEmptyArgumentInCallByReferenceWithTypeArguments() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReferenceWithTypeArguments.after.kt");
        }

        @TestMetadata("EmptyArgumentInThisAsConstructor.after.kt")
        public void testEmptyArgumentInThisAsConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInThisAsConstructor.after.kt");
        }

        @TestMetadata("EmptyConditionInCatch.after.kt")
        public void testEmptyConditionInCatch() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInCatch.after.kt");
        }

        @TestMetadata("EmptyConditionInDoWhile.after.kt")
        public void testEmptyConditionInDoWhile() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInDoWhile.after.kt");
        }

        @TestMetadata("EmptyConditionInFor.after.kt")
        public void testEmptyConditionInFor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInFor.after.kt");
        }

        @TestMetadata("EmptyConditionInIf.after.kt")
        public void testEmptyConditionInIf() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInIf.after.kt");
        }

        @TestMetadata("EmptyConditionInWhen.after.kt")
        public void testEmptyConditionInWhen() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInWhen.after.kt");
        }

        @TestMetadata("EmptyConditionInWhile.after.kt")
        public void testEmptyConditionInWhile() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInWhile.after.kt");
        }

        @TestMetadata("EmptyParameterInAnnonymousFunction.after.kt")
        public void testEmptyParameterInAnnonymousFunction() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInAnnonymousFunction.after.kt");
        }

        @TestMetadata("EmptyParameterInAnnonymousFunctionWithReceiver.after.kt")
        public void testEmptyParameterInAnnonymousFunctionWithReceiver() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInAnnonymousFunctionWithReceiver.after.kt");
        }

        @TestMetadata("EmptyParameterInDestructuringDeclaration.after.kt")
        public void testEmptyParameterInDestructuringDeclaration() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInDestructuringDeclaration.after.kt");
        }

        @TestMetadata("EmptyParameterInDestructuringDeclaration2.after.kt")
        public void testEmptyParameterInDestructuringDeclaration2() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInDestructuringDeclaration2.after.kt");
        }

        @TestMetadata("EmptyParameterInDestructuringDeclaration3.after.kt")
        public void testEmptyParameterInDestructuringDeclaration3() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInDestructuringDeclaration3.after.kt");
        }

        @TestMetadata("EmptyParameterInExplicitPrimaryConstructor.after.kt")
        public void testEmptyParameterInExplicitPrimaryConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInExplicitPrimaryConstructor.after.kt");
        }

        @TestMetadata("EmptyParameterInFunction.after.kt")
        public void testEmptyParameterInFunction() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunction.after.kt");
        }

        @TestMetadata("EmptyParameterInFunctionWithReceiver.after.kt")
        public void testEmptyParameterInFunctionWithReceiver() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunctionWithReceiver.after.kt");
        }

        @TestMetadata("EmptyParameterInFunctionWithTypeParameters.after.kt")
        public void testEmptyParameterInFunctionWithTypeParameters() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunctionWithTypeParameters.after.kt");
        }

        @TestMetadata("EmptyParameterInFunctionWithTypeParametersAndReceiver.after.kt")
        public void testEmptyParameterInFunctionWithTypeParametersAndReceiver() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunctionWithTypeParametersAndReceiver.after.kt");
        }

        @TestMetadata("EmptyParameterInGetter.after.kt")
        public void testEmptyParameterInGetter() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInGetter.after.kt");
        }

        @TestMetadata("EmptyParameterInImplicitPrimaryConstructor.after.kt")
        public void testEmptyParameterInImplicitPrimaryConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInImplicitPrimaryConstructor.after.kt");
        }

        @TestMetadata("EmptyParameterInImplicitPrimaryConstructorWithTypeParameters.after.kt")
        public void testEmptyParameterInImplicitPrimaryConstructorWithTypeParameters() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInImplicitPrimaryConstructorWithTypeParameters.after.kt");
        }

        @TestMetadata("EmptyParameterInInnerAnnonymousFunction.after.kt")
        public void testEmptyParameterInInnerAnnonymousFunction() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInInnerAnnonymousFunction.after.kt");
        }

        @TestMetadata("EmptyParameterInSecondaryConstructor.after.kt")
        public void testEmptyParameterInSecondaryConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInSecondaryConstructor.after.kt");
        }

        @TestMetadata("EmptyParameterInSetter.after.kt")
        public void testEmptyParameterInSetter() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInSetter.after.kt");
        }

        @TestMetadata("EmptyParameters.after.kt")
        public void testEmptyParameters() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameters.after.kt");
        }

        @TestMetadata("Finally.after.kt")
        public void testFinally() throws Exception {
            runTest("idea/testData/indentationOnNewline/Finally.after.kt");
        }

        @TestMetadata("Finally2.after.kt")
        public void testFinally2() throws Exception {
            runTest("idea/testData/indentationOnNewline/Finally2.after.kt");
        }

        @TestMetadata("Finally3.after.kt")
        public void testFinally3() throws Exception {
            runTest("idea/testData/indentationOnNewline/Finally3.after.kt");
        }

        @TestMetadata("Finally4.after.kt")
        public void testFinally4() throws Exception {
            runTest("idea/testData/indentationOnNewline/Finally4.after.kt");
        }

        @TestMetadata("For.after.kt")
        public void testFor() throws Exception {
            runTest("idea/testData/indentationOnNewline/For.after.kt");
        }

        @TestMetadata("ForWithBlock.after.kt")
        public void testForWithBlock() throws Exception {
            runTest("idea/testData/indentationOnNewline/ForWithBlock.after.kt");
        }

        @TestMetadata("ForWithCondition.after.kt")
        public void testForWithCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/ForWithCondition.after.kt");
        }

        @TestMetadata("ForWithoutCondition.after.kt")
        public void testForWithoutCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/ForWithoutCondition.after.kt");
        }

        @TestMetadata("FunctionBlock.after.kt")
        public void testFunctionBlock() throws Exception {
            runTest("idea/testData/indentationOnNewline/FunctionBlock.after.kt");
        }

        @TestMetadata("FunctionWithInference.after.kt")
        public void testFunctionWithInference() throws Exception {
            runTest("idea/testData/indentationOnNewline/FunctionWithInference.after.kt");
        }

        @TestMetadata("If.after.kt")
        public void testIf() throws Exception {
            runTest("idea/testData/indentationOnNewline/If.after.kt");
        }

        @TestMetadata("IfBeforeCondition.after.kt")
        public void testIfBeforeCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/IfBeforeCondition.after.kt");
        }

        @TestMetadata("IfBeforeCondition2.after.kt")
        public void testIfBeforeCondition2() throws Exception {
            runTest("idea/testData/indentationOnNewline/IfBeforeCondition2.after.kt");
        }

        @TestMetadata("IfBeforeCondition3.after.kt")
        public void testIfBeforeCondition3() throws Exception {
            runTest("idea/testData/indentationOnNewline/IfBeforeCondition3.after.kt");
        }

        @TestMetadata("IfBeforeCondition4.after.kt")
        public void testIfBeforeCondition4() throws Exception {
            runTest("idea/testData/indentationOnNewline/IfBeforeCondition4.after.kt");
        }

        @TestMetadata("IfWithBraces.after.kt")
        public void testIfWithBraces() throws Exception {
            runTest("idea/testData/indentationOnNewline/IfWithBraces.after.kt");
        }

        @TestMetadata("IfWithBraces2.after.kt")
        public void testIfWithBraces2() throws Exception {
            runTest("idea/testData/indentationOnNewline/IfWithBraces2.after.kt");
        }

        @TestMetadata("InBinaryExpressionInMiddle.after.kt")
        public void testInBinaryExpressionInMiddle() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionInMiddle.after.kt");
        }

        @TestMetadata("InBinaryExpressionUnfinished.after.kt")
        public void testInBinaryExpressionUnfinished() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionUnfinished.after.kt");
        }

        @TestMetadata("InBinaryExpressionUnfinishedInIf.after.kt")
        public void testInBinaryExpressionUnfinishedInIf() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionUnfinishedInIf.after.kt");
        }

        @TestMetadata("InBinaryExpressionsBeforeCloseParenthesis.after.kt")
        public void testInBinaryExpressionsBeforeCloseParenthesis() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionsBeforeCloseParenthesis.after.kt");
        }

        @TestMetadata("InDelegationListAfterColon.after.kt")
        public void testInDelegationListAfterColon() throws Exception {
            runTest("idea/testData/indentationOnNewline/InDelegationListAfterColon.after.kt");
        }

        @TestMetadata("InDelegationListAfterComma.after.kt")
        public void testInDelegationListAfterComma() throws Exception {
            runTest("idea/testData/indentationOnNewline/InDelegationListAfterComma.after.kt");
        }

        @TestMetadata("InDelegationListNotEmpty.after.kt")
        public void testInDelegationListNotEmpty() throws Exception {
            runTest("idea/testData/indentationOnNewline/InDelegationListNotEmpty.after.kt");
        }

        @TestMetadata("InEnumAfterSemicolon.after.kt")
        public void testInEnumAfterSemicolon() throws Exception {
            runTest("idea/testData/indentationOnNewline/InEnumAfterSemicolon.after.kt");
        }

        @TestMetadata("InEnumInitializerListAfterComma.after.kt")
        public void testInEnumInitializerListAfterComma() throws Exception {
            runTest("idea/testData/indentationOnNewline/InEnumInitializerListAfterComma.after.kt");
        }

        @TestMetadata("InEnumInitializerListNotEmpty.after.kt")
        public void testInEnumInitializerListNotEmpty() throws Exception {
            runTest("idea/testData/indentationOnNewline/InEnumInitializerListNotEmpty.after.kt");
        }

        @TestMetadata("InExpressionsParentheses.after.kt")
        public void testInExpressionsParentheses() throws Exception {
            runTest("idea/testData/indentationOnNewline/InExpressionsParentheses.after.kt");
        }

        @TestMetadata("InExpressionsParentheses2.after.kt")
        public void testInExpressionsParentheses2() throws Exception {
            runTest("idea/testData/indentationOnNewline/InExpressionsParentheses2.after.kt");
        }

        @TestMetadata("InExpressionsParentheses3.after.kt")
        public void testInExpressionsParentheses3() throws Exception {
            runTest("idea/testData/indentationOnNewline/InExpressionsParentheses3.after.kt");
        }

        @TestMetadata("InExpressionsParentheses4.after.kt")
        public void testInExpressionsParentheses4() throws Exception {
            runTest("idea/testData/indentationOnNewline/InExpressionsParentheses4.after.kt");
        }

        @TestMetadata("InExpressionsParenthesesBeforeOperand.after.kt")
        public void testInExpressionsParenthesesBeforeOperand() throws Exception {
            runTest("idea/testData/indentationOnNewline/InExpressionsParenthesesBeforeOperand.after.kt");
        }

        @TestMetadata("InLabmdaAfterArrow.after.kt")
        public void testInLabmdaAfterArrow() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLabmdaAfterArrow.after.kt");
        }

        @TestMetadata("InLambdaAfterArrowWithSpaces.after.kt")
        public void testInLambdaAfterArrowWithSpaces() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLambdaAfterArrowWithSpaces.after.kt");
        }

        @TestMetadata("InLambdaBeforeParams.after.kt")
        public void testInLambdaBeforeParams() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLambdaBeforeParams.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallSameLine.after.kt")
        public void testInLambdaInsideChainCallSameLine() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLambdaInsideChainCallSameLine.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallSameLineWithSpaces.after.kt")
        public void testInLambdaInsideChainCallSameLineWithSpaces() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLambdaInsideChainCallSameLineWithSpaces.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallWithNewLine.after.kt")
        public void testInLambdaInsideChainCallWithNewLine() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLambdaInsideChainCallWithNewLine.after.kt");
        }

        @TestMetadata("InLambdaInsideChainCallWithNewLineWithSpaces.after.kt")
        public void testInLambdaInsideChainCallWithNewLineWithSpaces() throws Exception {
            runTest("idea/testData/indentationOnNewline/InLambdaInsideChainCallWithNewLineWithSpaces.after.kt");
        }

        @TestMetadata("InMultilineLambdaAfterArrow.after.kt")
        public void testInMultilineLambdaAfterArrow() throws Exception {
            runTest("idea/testData/indentationOnNewline/InMultilineLambdaAfterArrow.after.kt");
        }

        @TestMetadata("IsExpressionAfterIs.after.kt")
        public void testIsExpressionAfterIs() throws Exception {
            runTest("idea/testData/indentationOnNewline/IsExpressionAfterIs.after.kt");
        }

        @TestMetadata("KT20783.after.kt")
        public void testKT20783() throws Exception {
            runTest("idea/testData/indentationOnNewline/KT20783.after.kt");
        }

        @TestMetadata("LargeFile.after.kt")
        public void testLargeFile() throws Exception {
            runTest("idea/testData/indentationOnNewline/LargeFile.after.kt");
        }

        @TestMetadata("LargeFileWithStringTemplate.after.kt")
        public void testLargeFileWithStringTemplate() throws Exception {
            runTest("idea/testData/indentationOnNewline/LargeFileWithStringTemplate.after.kt");
        }

        @TestMetadata("ModifierListInUnfinishedDeclaration.after.kt")
        public void testModifierListInUnfinishedDeclaration() throws Exception {
            runTest("idea/testData/indentationOnNewline/ModifierListInUnfinishedDeclaration.after.kt");
        }

        @TestMetadata("MultideclarationAfterEq.after.kt")
        public void testMultideclarationAfterEq() throws Exception {
            runTest("idea/testData/indentationOnNewline/MultideclarationAfterEq.after.kt");
        }

        @TestMetadata("MultideclarationBeforeEq.after.kt")
        public void testMultideclarationBeforeEq() throws Exception {
            runTest("idea/testData/indentationOnNewline/MultideclarationBeforeEq.after.kt");
        }

        @TestMetadata("NotFirstParameter.after.kt")
        public void testNotFirstParameter() throws Exception {
            runTest("idea/testData/indentationOnNewline/NotFirstParameter.after.kt");
        }

        @TestMetadata("PropertyWithInference.after.kt")
        public void testPropertyWithInference() throws Exception {
            runTest("idea/testData/indentationOnNewline/PropertyWithInference.after.kt");
        }

        @TestMetadata("ReturnContinue.after.kt")
        public void testReturnContinue() throws Exception {
            runTest("idea/testData/indentationOnNewline/ReturnContinue.after.kt");
        }

        @TestMetadata("Semicolon.after.kt")
        public void testSemicolon() throws Exception {
            runTest("idea/testData/indentationOnNewline/Semicolon.after.kt");
        }

        @TestMetadata("Semicolon2.after.kt")
        public void testSemicolon2() throws Exception {
            runTest("idea/testData/indentationOnNewline/Semicolon2.after.kt");
        }

        @TestMetadata("SettingAlignMultilineParametersInCalls.after.kt")
        public void testSettingAlignMultilineParametersInCalls() throws Exception {
            runTest("idea/testData/indentationOnNewline/SettingAlignMultilineParametersInCalls.after.kt");
        }

        @TestMetadata("TemplateEntryClose.after.kt")
        public void testTemplateEntryClose() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose.after.kt");
        }

        @TestMetadata("TemplateEntryClose2.after.kt")
        public void testTemplateEntryClose2() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose2.after.kt");
        }

        @TestMetadata("TemplateEntryClose3.after.kt")
        public void testTemplateEntryClose3() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose3.after.kt");
        }

        @TestMetadata("TemplateEntryClose4.after.kt")
        public void testTemplateEntryClose4() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose4.after.kt");
        }

        @TestMetadata("TemplateEntryClose5.after.kt")
        public void testTemplateEntryClose5() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose5.after.kt");
        }

        @TestMetadata("TemplateEntryClose6.after.kt")
        public void testTemplateEntryClose6() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose6.after.kt");
        }

        @TestMetadata("TemplateEntryClose7.after.kt")
        public void testTemplateEntryClose7() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryClose7.after.kt");
        }

        @TestMetadata("TemplateEntryCloseInMultilineString.after.kt")
        public void testTemplateEntryCloseInMultilineString() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryCloseInMultilineString.after.kt");
        }

        @TestMetadata("TemplateEntryCloseInMultilineString2.after.kt")
        public void testTemplateEntryCloseInMultilineString2() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryCloseInMultilineString2.after.kt");
        }

        @TestMetadata("TemplateEntryCloseInMultilineString3.after.kt")
        public void testTemplateEntryCloseInMultilineString3() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryCloseInMultilineString3.after.kt");
        }

        @TestMetadata("TemplateEntryOpen.after.kt")
        public void testTemplateEntryOpen() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpen.after.kt");
        }

        @TestMetadata("TemplateEntryOpen2.after.kt")
        public void testTemplateEntryOpen2() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpen2.after.kt");
        }

        @TestMetadata("TemplateEntryOpenInMultilineString.after.kt")
        public void testTemplateEntryOpenInMultilineString() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenInMultilineString.after.kt");
        }

        @TestMetadata("TemplateEntryOpenInMultilineString2.after.kt")
        public void testTemplateEntryOpenInMultilineString2() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenInMultilineString2.after.kt");
        }

        @TestMetadata("TemplateEntryOpenInMultilineString3.after.kt")
        public void testTemplateEntryOpenInMultilineString3() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenInMultilineString3.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithComment.after.kt")
        public void testTemplateEntryOpenWithComment() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithComment.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithComment2.after.kt")
        public void testTemplateEntryOpenWithComment2() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithComment2.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithoutContent.after.kt")
        public void testTemplateEntryOpenWithoutContent() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithoutContent.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithoutContent2.after.kt")
        public void testTemplateEntryOpenWithoutContent2() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithoutContent2.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithoutContent3.after.kt")
        public void testTemplateEntryOpenWithoutContent3() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithoutContent3.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithoutContent4.after.kt")
        public void testTemplateEntryOpenWithoutContent4() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithoutContent4.after.kt");
        }

        @TestMetadata("TemplateEntryOpenWithoutContent5.after.kt")
        public void testTemplateEntryOpenWithoutContent5() throws Exception {
            runTest("idea/testData/indentationOnNewline/TemplateEntryOpenWithoutContent5.after.kt");
        }

        @TestMetadata("Try.after.kt")
        public void testTry() throws Exception {
            runTest("idea/testData/indentationOnNewline/Try.after.kt");
        }

        @TestMetadata("Try2.after.kt")
        public void testTry2() throws Exception {
            runTest("idea/testData/indentationOnNewline/Try2.after.kt");
        }

        @TestMetadata("WhenWithCondition.after.kt")
        public void testWhenWithCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/WhenWithCondition.after.kt");
        }

        @TestMetadata("WhenWithCondition2.after.kt")
        public void testWhenWithCondition2() throws Exception {
            runTest("idea/testData/indentationOnNewline/WhenWithCondition2.after.kt");
        }

        @TestMetadata("WhenWithoutCondition.after.kt")
        public void testWhenWithoutCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/WhenWithoutCondition.after.kt");
        }

        @TestMetadata("While.after.kt")
        public void testWhile() throws Exception {
            runTest("idea/testData/indentationOnNewline/While.after.kt");
        }

        @TestMetadata("While2.after.kt")
        public void testWhile2() throws Exception {
            runTest("idea/testData/indentationOnNewline/While2.after.kt");
        }

        @TestMetadata("While3.after.kt")
        public void testWhile3() throws Exception {
            runTest("idea/testData/indentationOnNewline/While3.after.kt");
        }

        @TestMetadata("WhileWithBlock.after.kt")
        public void testWhileWithBlock() throws Exception {
            runTest("idea/testData/indentationOnNewline/WhileWithBlock.after.kt");
        }

        @TestMetadata("WhileWithCondition.after.kt")
        public void testWhileWithCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/WhileWithCondition.after.kt");
        }

        @TestMetadata("WhileWithoutCondition.after.kt")
        public void testWhileWithoutCondition() throws Exception {
            runTest("idea/testData/indentationOnNewline/WhileWithoutCondition.after.kt");
        }

        @TestMetadata("idea/testData/indentationOnNewline/script")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Script extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTest, this, testDataFilePath);
            }

            public void testAllFilesPresentInScript() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/testData/indentationOnNewline/script"), Pattern.compile("^([^\\.]+)\\.after\\.kt.*$"), null, true);
            }

            @TestMetadata("ScriptAfterClosingBrace.after.kts")
            public void testScriptAfterClosingBrace() throws Exception {
                runTest("idea/testData/indentationOnNewline/script/ScriptAfterClosingBrace.after.kts");
            }

            @TestMetadata("ScriptAfterExpression.after.kts")
            public void testScriptAfterExpression() throws Exception {
                runTest("idea/testData/indentationOnNewline/script/ScriptAfterExpression.after.kts");
            }

            @TestMetadata("ScriptAfterFun.after.kts")
            public void testScriptAfterFun() throws Exception {
                runTest("idea/testData/indentationOnNewline/script/ScriptAfterFun.after.kts");
            }

            @TestMetadata("ScriptAfterImport.after.kts")
            public void testScriptAfterImport() throws Exception {
                runTest("idea/testData/indentationOnNewline/script/ScriptAfterImport.after.kts");
            }

            @TestMetadata("ScriptBetweenFunctionCalls.after.kts")
            public void testScriptBetweenFunctionCalls() throws Exception {
                runTest("idea/testData/indentationOnNewline/script/ScriptBetweenFunctionCalls.after.kts");
            }

            @TestMetadata("ScriptInsideFun.after.kts")
            public void testScriptInsideFun() throws Exception {
                runTest("idea/testData/indentationOnNewline/script/ScriptInsideFun.after.kts");
            }
        }
    }

    @TestMetadata("idea/testData/indentationOnNewline")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class InvertedSettings extends AbstractTypingIndentationTestBase {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
        }

        public void testAllFilesPresentInInvertedSettings() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/testData/indentationOnNewline"), Pattern.compile("^([^\\.]+)\\.after\\.inv\\.kt.*$"), null, true);
        }

        @TestMetadata("ArgumentListNormalIndent.after.inv.kt")
        public void testArgumentListNormalIndent() throws Exception {
            runTest("idea/testData/indentationOnNewline/ArgumentListNormalIndent.after.inv.kt");
        }

        @TestMetadata("AssignmentAfterEq.after.inv.kt")
        public void testAssignmentAfterEq() throws Exception {
            runTest("idea/testData/indentationOnNewline/AssignmentAfterEq.after.inv.kt");
        }

        @TestMetadata("BinaryWithTypeExpressions.after.inv.kt")
        public void testBinaryWithTypeExpressions() throws Exception {
            runTest("idea/testData/indentationOnNewline/BinaryWithTypeExpressions.after.inv.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReference.after.inv.kt")
        public void testEmptyArgumentInCallByReference() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReference.after.inv.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReferenceInSuperType.after.inv.kt")
        public void testEmptyArgumentInCallByReferenceInSuperType() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReferenceInSuperType.after.inv.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments.after.inv.kt")
        public void testEmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReferenceInSuperTypeWithTypeArguments.after.inv.kt");
        }

        @TestMetadata("EmptyArgumentInCallByReferenceWithTypeArguments.after.inv.kt")
        public void testEmptyArgumentInCallByReferenceWithTypeArguments() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInCallByReferenceWithTypeArguments.after.inv.kt");
        }

        @TestMetadata("EmptyArgumentInThisAsConstructor.after.inv.kt")
        public void testEmptyArgumentInThisAsConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyArgumentInThisAsConstructor.after.inv.kt");
        }

        @TestMetadata("EmptyConditionInCatch.after.inv.kt")
        public void testEmptyConditionInCatch() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInCatch.after.inv.kt");
        }

        @TestMetadata("EmptyConditionInDoWhile.after.inv.kt")
        public void testEmptyConditionInDoWhile() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInDoWhile.after.inv.kt");
        }

        @TestMetadata("EmptyConditionInFor.after.inv.kt")
        public void testEmptyConditionInFor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInFor.after.inv.kt");
        }

        @TestMetadata("EmptyConditionInIf.after.inv.kt")
        public void testEmptyConditionInIf() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInIf.after.inv.kt");
        }

        @TestMetadata("EmptyConditionInWhen.after.inv.kt")
        public void testEmptyConditionInWhen() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInWhen.after.inv.kt");
        }

        @TestMetadata("EmptyConditionInWhile.after.inv.kt")
        public void testEmptyConditionInWhile() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyConditionInWhile.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInAnnonymousFunction.after.inv.kt")
        public void testEmptyParameterInAnnonymousFunction() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInAnnonymousFunction.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInAnnonymousFunctionWithReceiver.after.inv.kt")
        public void testEmptyParameterInAnnonymousFunctionWithReceiver() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInAnnonymousFunctionWithReceiver.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInDestructuringDeclaration.after.inv.kt")
        public void testEmptyParameterInDestructuringDeclaration() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInDestructuringDeclaration.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInDestructuringDeclaration2.after.inv.kt")
        public void testEmptyParameterInDestructuringDeclaration2() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInDestructuringDeclaration2.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInDestructuringDeclaration3.after.inv.kt")
        public void testEmptyParameterInDestructuringDeclaration3() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInDestructuringDeclaration3.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInExplicitPrimaryConstructor.after.inv.kt")
        public void testEmptyParameterInExplicitPrimaryConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInExplicitPrimaryConstructor.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInFunction.after.inv.kt")
        public void testEmptyParameterInFunction() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunction.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInFunctionWithReceiver.after.inv.kt")
        public void testEmptyParameterInFunctionWithReceiver() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunctionWithReceiver.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInFunctionWithTypeParameters.after.inv.kt")
        public void testEmptyParameterInFunctionWithTypeParameters() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunctionWithTypeParameters.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInFunctionWithTypeParametersAndReceiver.after.inv.kt")
        public void testEmptyParameterInFunctionWithTypeParametersAndReceiver() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInFunctionWithTypeParametersAndReceiver.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInGetter.after.inv.kt")
        public void testEmptyParameterInGetter() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInGetter.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInImplicitPrimaryConstructor.after.inv.kt")
        public void testEmptyParameterInImplicitPrimaryConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInImplicitPrimaryConstructor.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInImplicitPrimaryConstructorWithTypeParameters.after.inv.kt")
        public void testEmptyParameterInImplicitPrimaryConstructorWithTypeParameters() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInImplicitPrimaryConstructorWithTypeParameters.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInInnerAnnonymousFunction.after.inv.kt")
        public void testEmptyParameterInInnerAnnonymousFunction() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInInnerAnnonymousFunction.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInSecondaryConstructor.after.inv.kt")
        public void testEmptyParameterInSecondaryConstructor() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInSecondaryConstructor.after.inv.kt");
        }

        @TestMetadata("EmptyParameterInSetter.after.inv.kt")
        public void testEmptyParameterInSetter() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameterInSetter.after.inv.kt");
        }

        @TestMetadata("EmptyParameters.after.inv.kt")
        public void testEmptyParameters() throws Exception {
            runTest("idea/testData/indentationOnNewline/EmptyParameters.after.inv.kt");
        }

        @TestMetadata("InBinaryExpressionInMiddle.after.inv.kt")
        public void testInBinaryExpressionInMiddle() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionInMiddle.after.inv.kt");
        }

        @TestMetadata("InBinaryExpressionUnfinished.after.inv.kt")
        public void testInBinaryExpressionUnfinished() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionUnfinished.after.inv.kt");
        }

        @TestMetadata("InBinaryExpressionUnfinishedInIf.after.inv.kt")
        public void testInBinaryExpressionUnfinishedInIf() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionUnfinishedInIf.after.inv.kt");
        }

        @TestMetadata("InBinaryExpressionsBeforeCloseParenthesis.after.inv.kt")
        public void testInBinaryExpressionsBeforeCloseParenthesis() throws Exception {
            runTest("idea/testData/indentationOnNewline/InBinaryExpressionsBeforeCloseParenthesis.after.inv.kt");
        }

        @TestMetadata("InDelegationListAfterColon.after.inv.kt")
        public void testInDelegationListAfterColon() throws Exception {
            runTest("idea/testData/indentationOnNewline/InDelegationListAfterColon.after.inv.kt");
        }

        @TestMetadata("InDelegationListAfterComma.after.inv.kt")
        public void testInDelegationListAfterComma() throws Exception {
            runTest("idea/testData/indentationOnNewline/InDelegationListAfterComma.after.inv.kt");
        }

        @TestMetadata("InDelegationListNotEmpty.after.inv.kt")
        public void testInDelegationListNotEmpty() throws Exception {
            runTest("idea/testData/indentationOnNewline/InDelegationListNotEmpty.after.inv.kt");
        }

        @TestMetadata("InEnumAfterSemicolon.after.inv.kt")
        public void testInEnumAfterSemicolon() throws Exception {
            runTest("idea/testData/indentationOnNewline/InEnumAfterSemicolon.after.inv.kt");
        }

        @TestMetadata("InEnumInitializerListAfterComma.after.inv.kt")
        public void testInEnumInitializerListAfterComma() throws Exception {
            runTest("idea/testData/indentationOnNewline/InEnumInitializerListAfterComma.after.inv.kt");
        }

        @TestMetadata("InEnumInitializerListNotEmpty.after.inv.kt")
        public void testInEnumInitializerListNotEmpty() throws Exception {
            runTest("idea/testData/indentationOnNewline/InEnumInitializerListNotEmpty.after.inv.kt");
        }

        @TestMetadata("InExpressionsParenthesesBeforeOperand.after.inv.kt")
        public void testInExpressionsParenthesesBeforeOperand() throws Exception {
            runTest("idea/testData/indentationOnNewline/InExpressionsParenthesesBeforeOperand.after.inv.kt");
        }

        @TestMetadata("IsExpressionAfterIs.after.inv.kt")
        public void testIsExpressionAfterIs() throws Exception {
            runTest("idea/testData/indentationOnNewline/IsExpressionAfterIs.after.inv.kt");
        }

        @TestMetadata("SettingAlignMultilineParametersInCalls.after.inv.kt")
        public void testSettingAlignMultilineParametersInCalls() throws Exception {
            runTest("idea/testData/indentationOnNewline/SettingAlignMultilineParametersInCalls.after.inv.kt");
        }

        @TestMetadata("idea/testData/indentationOnNewline/script")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Script extends AbstractTypingIndentationTestBase {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doNewlineTestWithInvert, this, testDataFilePath);
            }

            public void testAllFilesPresentInScript() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("idea/testData/indentationOnNewline/script"), Pattern.compile("^([^\\.]+)\\.after\\.inv\\.kt.*$"), null, true);
            }
        }
    }
}
